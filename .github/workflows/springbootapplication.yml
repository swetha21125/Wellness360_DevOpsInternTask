name: Build and Deploy to ECR

on:
  push:
    branches:
    
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Unit Testing
  unit-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: temurin

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Run Unit Tests
      run: mvn clean test

  # Job 2: Integration Testing (Depends on unit-tests)
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests  # This job will only run if unit-tests pass

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: temurin

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Run Integration Tests
      run: mvn clean verify -DskipTests=false  # Add integration test commands if needed

  # Job 3: Build and Deploy Docker Image (Depends on integration-tests)
  build-test-deploy:
    runs-on: ubuntu-latest
    needs: integration-tests  # This job will only run if integration-tests pass

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: temurin

    # Step 3: Cache Maven dependencies
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Step 4: Build and run tests (if needed)
    - name: Build and run tests
      run: mvn clean verify

    # Step 5: Set up AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  

    # Step 6: Log in to Amazon ECR
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Step 7: Build, tag, and push Docker image
    - name: Build, tag, and push Docker image
      env:
        ECR_REPOSITORY: ecr1 
        IMAGE_TAG: ${{ github.sha }}-${{ github.ref_name }}  # Include branch name in the tag for better clarity
      run: |
        # Sanitize branch name to create a valid Docker tag
        SANITIZED_BRANCH_NAME=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
        SANITIZED_BRANCH_NAME=${SANITIZED_BRANCH_NAME//\//-}


        # Get the ECR registry URI
        ECR_REGISTRY=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --query "repositories[0].repositoryUri" --output text)
        
        # Build the Docker image with a tag based on the commit hash and sanitized branch name
        docker build -t $ECR_REGISTRY:$IMAGE_TAG .

        # Tag the image with 'latest' and the sanitized branch name for better tracking
        docker tag $ECR_REGISTRY:$IMAGE_TAG $ECR_REGISTRY:${SANITIZED_BRANCH_NAME}-latest
        docker tag $ECR_REGISTRY:$IMAGE_TAG $ECR_REGISTRY:${GITHUB_SHA}  # Commit-based tag

        # Push both tags to the repository
        docker push $ECR_REGISTRY:$IMAGE_TAG
        docker push $ECR_REGISTRY:${SANITIZED_BRANCH_NAME}-latest
        docker push $ECR_REGISTRY:${GITHUB_SHA}  # Commit-based tag
