name: CI/CD Pipeline for Spring Boot App

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build, Push Docker Image to ECR
    runs-on: ubuntu-latest

    env:
      ECR_REPO: <your-ecr-repository-name> # Replace with your ECR repository name
      AWS_REGION: <your-aws-region>        # Replace with your AWS region, e.g., us-east-1
      IMAGE_TAG: ${{ github.sha }}         # Use commit SHA as the Docker image tag

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up JDK for Maven build
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      # Step 3: Cache Maven dependencies
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      # Step 4: Build the Maven project
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Step 5: Log in to AWS ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 6: Build Docker image
      - name: Build Docker Image
        run: |
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker tag $ECR_REPO:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG

      # Step 7: Push Docker image to ECR
      - name: Push Docker Image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG

      # Step 8: Output ECR Image URL
      - name: Output ECR Image URL
        run: echo "ECR Image URL: ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG"
